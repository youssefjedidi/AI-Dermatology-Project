# .github/workflows/main.yml

# Name of the workflow, which will be displayed on the GitHub Actions tab.
name: Python Project CI Pipeline

# --- TRIGGERS ---
# This workflow runs on pushes to the 'main' branch and on pull requests targeting 'main'.
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# --- JOBS ---
# A workflow is made up of one or more jobs that run in parallel or sequentially.
jobs:
  # This job is named 'build-and-test'. You can name it anything.
  build-and-test:
    # The type of runner that the job will run on. 'ubuntu-latest' is the most common and cost-effective.
    runs-on: ubuntu-latest

    # --- STRATEGY: TEST ON MULTIPLE PYTHON VERSIONS ---
    # This section runs the job multiple times, once for each Python version listed.
    strategy:
      fail-fast: false # Don't cancel other jobs if one fails.
      matrix:
        python-version: ["3.9", "3.10", "3.11"]

    # --- ENVIRONMENT VARIABLES FOR KAGGLE ---
    # Set Kaggle credentials as environment variables for the entire job
    env:
      KAGGLE_USERNAME: test_user
      KAGGLE_KEY: fake_key_for_testing

    # --- STEPS ---
    # A sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out the repository code onto the runner.
      - name: Check out repository code
        uses: actions/checkout@v4

      # Step 2: Set up the specific Python version for this job run.
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Cache dependencies for faster builds.
      # This step stores the installed packages so they don't need to be downloaded from scratch every time.
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip # The directory to cache.
          # The cache key: it's invalidated if the Python version or requirements.txt changes.
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install the project's dependencies.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest # Ensure testing tools are installed

      # Step 5: Set up fake Kaggle credentials for testing
      # This prevents authentication errors when importing the data_ingestion module
      - name: Set up Kaggle credentials for testing
        run: |
          # Create kaggle.json in project root (where your code expects it)
          echo '{"username":"test_user","key":"fake_key_for_testing"}' > kaggle.json
          # Also create in ~/.kaggle/ directory (standard Kaggle location)
          mkdir -p ~/.kaggle
          echo '{"username":"test_user","key":"fake_key_for_testing"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      # Step 6: Lint the code with flake8 to check for style issues and simple errors.
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # Step 7: Run the tests with pytest.
      # Your pytest.ini already configures coverage, so the command is simple.
      - name: Run tests with pytest
        run: |
          pytest
